import os

# --- Configuration ---
# Input path to your quantized TFLite model
TFLITE_MODEL_PATH = 'quantized_pig_detector.tflite'

# Output path for the C++ header file
HEADER_FILE_PATH = 'model_data.h'

# Name of the C++ array variable that will hold the model data
MODEL_VARIABLE_NAME = 'g_model_data'

print("--- Starting TFLite to C++ Header Conversion ---")

# --- 1. Read the TFLite model file ---
try:
    with open(TFLITE_MODEL_PATH, 'rb') as f:
        tflite_model_content = f.read()
    print(f"Successfully read TFLite model from: {TFLITE_MODEL_PATH}")
except FileNotFoundError:
    print(f"Error: TFLite model file not found at '{TFLITE_MODEL_PATH}'.")
    print("Please ensure 'quantized_pig_detector.tflite' is in the same directory as this script.")
    exit()
except Exception as e:
    print(f"Error reading TFLite model file: {e}")
    exit()

# --- 2. Format the content as a C++ byte array ---
# Convert bytes to a comma-separated string of hex values
hex_values = [f'0x{byte:02x}' for byte in tflite_model_content]
model_data_string = ', '.join(hex_values)

# --- 3. Create the C++ header file content ---
header_content = f"""
// This file was automatically generated by tflite_to_header.py
// It contains the binary data of your TensorFlow Lite model.

#ifndef MODEL_DATA_H
#define MODEL_DATA_H

#include <cstdint> // For uint8_t

// The TensorFlow Lite model data as a C++ byte array.
// This model has been quantized for embedded deployment.
const uint8_t {MODEL_VARIABLE_NAME}[] = {{
    {model_data_string}
}};

// The size of the model data in bytes.
const int {MODEL_VARIABLE_NAME}_len = {len(tflite_model_content)};

#endif // MODEL_DATA_H
"""

# --- 4. Write the content to the header file ---
try:
    with open(HEADER_FILE_PATH, 'w') as f:
        f.write(header_content)
    print(f"Successfully created C++ header file: {HEADER_FILE_PATH}")
    print(f"Model variable name: {MODEL_VARIABLE_NAME}")
    print(f"Model data size: {len(tflite_model_content)} bytes ({len(tflite_model_content) / (1024*1024):.2f} MB)")
except Exception as e:
    print(f"Error writing header file: {e}")
    exit()

print("\n--- TFLite to C++ Header Conversion Complete ---")
print(f"You can now include '{HEADER_FILE_PATH}' in your ESP32-CAM Arduino sketch.")
print("The next step involves integrating TensorFlow Lite Micro library and inference code into your ESP32-CAM project.")

